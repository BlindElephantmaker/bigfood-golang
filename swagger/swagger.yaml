basePath: /
definitions:
  actions.Response:
    properties:
      cafe-id:
        example: uuid
        type: string
      cafeUser.Roles:
        items:
          type: string
        type: array
      comment:
        type: string
      id:
        example: uuid
        type: string
      user-id:
        example: uuid
        type: string
      user.Name:
        type: string
    type: object
  auth.Message:
    properties:
      phone:
        example: "+71234567890"
        type: string
      sms-code:
        example: "1234"
        type: string
    required:
    - phone
    - sms-code
    type: object
  cafeUserCreate.Message:
    properties:
      cafe-id:
        example: uuid
        type: string
      comment:
        type: string
      phone:
        example: User phone
        type: string
      roles:
        example:
        - owner
        - admin
        - hostess
        items:
          type: string
        type: array
    required:
    - cafe-id
    - phone
    - roles
    type: object
  cafeUserDelete.Message:
    properties:
      cafe-user-id:
        example: uuid
        type: string
    required:
    - cafe-user-id
    type: object
  cafeUserList.Message:
    properties:
      cafe-id:
        example: uuid
        type: string
    required:
    - cafe-id
    type: object
  cafeUserList.Response:
    properties:
      cafe-users:
        items:
          $ref: '#/definitions/actions.Response'
        type: array
    type: object
  controller.AuthResponse:
    properties:
      access-token:
        type: string
      is-new:
        type: boolean
      refresh-token:
        example: UUID
        type: string
      user-id:
        example: UUID
        type: string
    type: object
  controller.CafeCreateResponse:
    properties:
      id:
        example: uuid created cafe
        type: string
    type: object
  controller.RefreshTokenResponse:
    properties:
      access:
        type: string
      id:
        example: UUID
        type: string
      refresh:
        example: UUID
        type: string
    type: object
  controller.TableCreateResponse:
    properties:
      table:
        $ref: '#/definitions/table.Table'
    type: object
  controller.TableListResponse:
    properties:
      tables:
        items:
          $ref: '#/definitions/table.Table'
        type: array
    type: object
  createMass.Message:
    properties:
      cafe-id:
        example: uuid
        type: string
      quantity:
        example: 10
        type: integer
    required:
    - cafe-id
    - quantity
    type: object
  getList.Message:
    properties:
      cafe-id:
        example: uuid
        type: string
    required:
    - cafe-id
    type: object
  refreshToken.Message:
    properties:
      token:
        example: UUID
        type: string
    required:
    - token
    type: object
  sendSmsCode.Message:
    properties:
      phone:
        example: "+71234567890"
        type: string
    required:
    - phone
    type: object
  server.ResponseError:
    properties:
      message:
        example: Error message
        type: string
    type: object
  table.Table:
    properties:
      cafe-id:
        example: uuid
        type: string
      comment:
        example: comment
        type: string
      id:
        example: uuid
        type: string
      seats:
        example: 4
        type: integer
      title:
        example: serial number
        type: string
    type: object
  tableCreate.Message:
    properties:
      cafe-id:
        example: uuid
        type: string
      comment:
        type: string
      seats:
        type: integer
      title:
        type: string
    required:
    - cafe-id
    type: object
  tableDelete.Message:
    properties:
      table-id:
        example: uuid
        type: string
    required:
    - table-id
    type: object
  tableDeleteAll.Message:
    properties:
      cafe-id:
        example: uuid
        type: string
    required:
    - cafe-id
    type: object
  tableEdit.Message:
    properties:
      comment:
        type: string
      seats:
        type: integer
      table-id:
        example: uuid
        type: string
      title:
        description: 'todo: check *'
        type: string
    required:
    - table-id
    type: object
  userEdit.Message:
    properties:
      name:
        example: New user name
        type: string
    required:
    - name
    type: object
  userLogout.Message:
    properties:
      token:
        example: uuid
        type: string
    required:
    - token
    type: object
host: localhost:8000
info:
  contact: {}
  description: Internal API
  title: Bigfood
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Get new refresh and access tokens
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.Message'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/controller.AuthResponse'
        "422":
          description: SMS code not confirmed
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      summary: User authorization
      tags:
      - auth
  /auth/logout:
    delete:
      consumes:
      - application/json
      description: Any reason to do this?
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/userLogout.Message'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: User logout (Deprecated)
      tags:
      - auth
  /auth/refresh-token:
    put:
      consumes:
      - application/json
      description: Refresh user refresh and access tokens
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/refreshToken.Message'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/controller.RefreshTokenResponse'
        "400":
          description: Invalid refresh token format
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      summary: Refresh jwt token
      tags:
      - auth
  /auth/sms-code:
    post:
      consumes:
      - application/json
      description: Send SMS code to user at authorization
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/sendSmsCode.Message'
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Phone number is invalid
          schema:
            $ref: '#/definitions/server.ResponseError'
        "429":
          description: Retry count of sms code requests exceeded
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      summary: Send SMS code
      tags:
      - auth
  /cafe:
    post:
      description: Create new cafe
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/controller.CafeCreateResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create cafe
      tags:
      - cafe
  /cafe/user:
    delete:
      consumes:
      - application/json
      description: Delete cafe user
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/cafeUserDelete.Message'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete cafe user
      tags:
      - cafe user
    post:
      consumes:
      - application/json
      description: Create cafe user
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/cafeUserCreate.Message'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/actions.Response'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "422":
          description: Cafe user already exist
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create cafe user
      tags:
      - cafe user
  /cafe/user/list:
    get:
      consumes:
      - application/json
      description: Get cafe user list
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/cafeUserList.Message'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/cafeUserList.Response'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get cafe user list
      tags:
      - cafe user
  /table:
    delete:
      consumes:
      - application/json
      description: Delete table
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/tableDelete.Message'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete table
      tags:
      - table
    post:
      consumes:
      - application/json
      description: Create table
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/tableCreate.Message'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/controller.TableCreateResponse'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create table
      tags:
      - table
    put:
      consumes:
      - application/json
      description: Edit table
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/tableEdit.Message'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Edit table
      tags:
      - table
  /table/delete-all:
    delete:
      consumes:
      - application/json
      description: Delete all tables
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/tableDeleteAll.Message'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete all tables
      tags:
      - table
  /table/list:
    get:
      consumes:
      - application/json
      description: Get table list of cafe
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/getList.Message'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/controller.TableListResponse'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get table list
      tags:
      - table
  /table/mass-create:
    post:
      consumes:
      - application/json
      description: Create N-quantity of tables
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/createMass.Message'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/controller.TableListResponse'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "401":
          description: Access Denied
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Mass creation
      tags:
      - table
  /user:
    put:
      consumes:
      - application/json
      description: Edit user information
      parameters:
      - description: Body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/userEdit.Message'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid user data
          schema:
            $ref: '#/definitions/server.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Edit user
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
