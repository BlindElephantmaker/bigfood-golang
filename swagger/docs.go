// Package swagger GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package swagger

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Get new refresh and access tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User authorization",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    },
                    "422": {
                        "description": "SMS code not confirmed",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "put": {
                "description": "Refresh user refresh and access tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh jwt token",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/refreshToken.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/refreshToken.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid refresh token format",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/auth/sms-code": {
            "post": {
                "description": "Send SMS code to user at authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Send SMS code",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sendSmsCode.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Phone number is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "429": {
                        "description": "Retry count of sms code requests exceeded",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/cafe": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create new cafe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cafe"
                ],
                "summary": "Create cafe",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/createCafe.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/cafe/user": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Edit cafe user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cafe user"
                ],
                "summary": "Edit cafe user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cafeUserEdit.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/actions.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "422": {
                        "description": "Owner role could not be set",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create cafe user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cafe user"
                ],
                "summary": "Create cafe user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cafeUserCreate.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/actions.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "422": {
                        "description": "Cafe user already exist",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete cafe user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "cafe user"
                ],
                "summary": "Delete cafe user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cafeUserDelete.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/cafe/user/list/{cafe-id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get cafe user list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cafe user"
                ],
                "summary": "Get cafe user list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cafe-id",
                        "name": "cafe-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/cafeUserList.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/reserve": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reserve edit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reserve"
                ],
                "summary": "Reserve edit",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reserveEdit.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/reserve.Reserve"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create reserve",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reserve"
                ],
                "summary": "Create reserve",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reserveAction.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/reserve.Reserve"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete reserve",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "reserve"
                ],
                "summary": "Delete reserve",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reserveDelete.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/reserve/table/{table-id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get reserve list by table",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reserve"
                ],
                "summary": "Get reserve list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "table-id",
                        "name": "table-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/reserveListByTable.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/reserve/table/{table-id}/history": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get reserve history list by table",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reserve"
                ],
                "summary": "Get reserve history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "table-id",
                        "name": "table-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/reserveHistoryByTable.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/reserve/undelete": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reserve undelete",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "reserve"
                ],
                "summary": "Reserve undelete",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reserveUndelete.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/reserve/{reserve-id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get reserve",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reserve"
                ],
                "summary": "Get reserve",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reserve-id",
                        "name": "reserve-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/reserve.Reserve"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/table": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Edit table",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Edit table",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tableEdit.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Create table",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tableCreate.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/table.Table"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete table",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Delete table",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tableDelete.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/table/create-mass": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create N-quantity of tables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Mass creation",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/createMass.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/createMass.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/table/delete-all": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete all tables",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Delete all tables",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tableDeleteAll.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/table/list/{cafe-id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get table list by cafe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Get table list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cafe-id",
                        "name": "cafe-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/tableList.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/table/list/{cafe-id}/available": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get list available tables",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Get list available tables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cafe-id",
                        "name": "cafe-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "from",
                        "name": "from-date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "until",
                        "name": "until-date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/tableListAvailable.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        },
        "/user": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Edit user information",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Edit user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userEdit.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid user data",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "actions.Response": {
            "type": "object",
            "properties": {
                "cafeUser": {
                    "$ref": "#/definitions/cafeUser.CafeUser"
                },
                "roles": {
                    "description": "todo: get list or roles from const",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "owner",
                        "admin",
                        "hostess"
                    ]
                },
                "user-name": {
                    "type": "string"
                }
            }
        },
        "auth.Message": {
            "type": "object",
            "required": [
                "phone",
                "sms-code"
            ],
            "properties": {
                "phone": {
                    "type": "string",
                    "example": "+71234567890"
                },
                "sms-code": {
                    "type": "string",
                    "example": "1234"
                }
            }
        },
        "auth.Response": {
            "type": "object",
            "properties": {
                "access-token": {
                    "type": "string"
                },
                "is-new": {
                    "type": "boolean"
                },
                "refresh-token": {
                    "type": "string",
                    "example": "UUID"
                },
                "user-id": {
                    "type": "string",
                    "example": "UUID"
                }
            }
        },
        "cafe.Cafe": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "uuid"
                }
            }
        },
        "cafeUser.CafeUser": {
            "type": "object",
            "properties": {
                "cafe-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "uuid"
                },
                "user-id": {
                    "type": "string",
                    "example": "uuid"
                }
            }
        },
        "cafeUserCreate.Message": {
            "type": "object",
            "required": [
                "cafe-id",
                "phone",
                "roles"
            ],
            "properties": {
                "cafe-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "comment": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "example": "User phone"
                },
                "roles": {
                    "description": "todo: collection",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "owner",
                        "admin",
                        "hostess"
                    ]
                }
            }
        },
        "cafeUserDelete.Message": {
            "type": "object",
            "required": [
                "cafe-user-id"
            ],
            "properties": {
                "cafe-user-id": {
                    "type": "string",
                    "example": "uuid"
                }
            }
        },
        "cafeUserEdit.Message": {
            "type": "object",
            "required": [
                "cafe-user-id"
            ],
            "properties": {
                "cafe-user-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "comment": {
                    "type": "string"
                },
                "roles": {
                    "description": "todo: bad array swagger and parse collection",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "cafeUserList.Response": {
            "type": "object",
            "properties": {
                "cafe-users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/actions.Response"
                    }
                }
            }
        },
        "createCafe.Response": {
            "type": "object",
            "properties": {
                "cafe": {
                    "$ref": "#/definitions/cafe.Cafe"
                }
            }
        },
        "createMass.Message": {
            "type": "object",
            "required": [
                "cafe-id",
                "quantity"
            ],
            "properties": {
                "cafe-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "quantity": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "createMass.Response": {
            "type": "object",
            "properties": {
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/table.Table"
                    }
                }
            }
        },
        "refreshToken.Message": {
            "type": "object",
            "required": [
                "refresh-token"
            ],
            "properties": {
                "refresh-token": {
                    "type": "string",
                    "example": "UUID"
                }
            }
        },
        "refreshToken.Response": {
            "type": "object",
            "properties": {
                "access-token": {
                    "type": "string"
                },
                "refresh-token": {
                    "type": "string",
                    "example": "UUID"
                },
                "user-id": {
                    "type": "string",
                    "example": "UUID"
                }
            }
        },
        "reserve.Reserve": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "contact-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "deleted-at": {
                    "type": "string",
                    "example": "RFC3339"
                },
                "from-date": {
                    "type": "string",
                    "example": "RFC3339"
                },
                "guest-count": {
                    "type": "integer",
                    "example": 4
                },
                "id": {
                    "type": "string",
                    "example": "uuid"
                },
                "table-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "until-date": {
                    "type": "string",
                    "example": "RFC3339"
                }
            }
        },
        "reserveAction.Message": {
            "type": "object",
            "required": [
                "comment",
                "from-data",
                "guest-count",
                "table-id",
                "until-data"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "contact-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "from-data": {
                    "type": "string",
                    "example": "RFC3339"
                },
                "guest-count": {
                    "type": "integer",
                    "example": 4
                },
                "phone": {
                    "type": "string",
                    "example": "+71234567890"
                },
                "table-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "until-data": {
                    "type": "string",
                    "example": "RFC3339"
                }
            }
        },
        "reserveDelete.Message": {
            "type": "object",
            "required": [
                "reserve-id"
            ],
            "properties": {
                "reserve-id": {
                    "type": "string",
                    "example": "uuid"
                }
            }
        },
        "reserveEdit.Message": {
            "type": "object",
            "required": [
                "comment",
                "from-data",
                "guest-count",
                "reserve-id",
                "table-id",
                "until-data"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "contact-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "from-data": {
                    "type": "string",
                    "example": "RFC3339"
                },
                "guest-count": {
                    "type": "integer",
                    "example": 4
                },
                "phone": {
                    "type": "string",
                    "example": "+71234567890"
                },
                "reserve-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "table-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "until-data": {
                    "type": "string",
                    "example": "RFC3339"
                }
            }
        },
        "reserveHistoryByTable.Response": {
            "type": "object",
            "properties": {
                "reserves": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reserve.Reserve"
                    }
                }
            }
        },
        "reserveListByTable.Response": {
            "type": "object",
            "properties": {
                "actual": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reserve.Reserve"
                    }
                },
                "deleted": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reserve.Reserve"
                    }
                }
            }
        },
        "reserveUndelete.Message": {
            "type": "object",
            "required": [
                "reserve-id"
            ],
            "properties": {
                "reserve-id": {
                    "type": "string",
                    "example": "uuid"
                }
            }
        },
        "sendSmsCode.Message": {
            "type": "object",
            "required": [
                "phone"
            ],
            "properties": {
                "phone": {
                    "type": "string",
                    "example": "+71234567890"
                }
            }
        },
        "server.ResponseError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Error message"
                }
            }
        },
        "table.Table": {
            "type": "object",
            "properties": {
                "cafe-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "comment": {
                    "type": "string",
                    "example": "comment"
                },
                "id": {
                    "type": "string",
                    "example": "uuid"
                },
                "seats": {
                    "type": "integer",
                    "example": 4
                },
                "title": {
                    "type": "string",
                    "example": "serial number"
                }
            }
        },
        "tableCreate.Message": {
            "type": "object",
            "required": [
                "cafe-id"
            ],
            "properties": {
                "cafe-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "comment": {
                    "type": "string"
                },
                "seats": {
                    "type": "integer",
                    "example": 4
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "tableDelete.Message": {
            "type": "object",
            "required": [
                "table-id"
            ],
            "properties": {
                "table-id": {
                    "type": "string",
                    "example": "uuid"
                }
            }
        },
        "tableDeleteAll.Message": {
            "type": "object",
            "required": [
                "cafe-id"
            ],
            "properties": {
                "cafe-id": {
                    "type": "string",
                    "example": "uuid"
                }
            }
        },
        "tableEdit.Message": {
            "type": "object",
            "required": [
                "table-id"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "seats": {
                    "type": "integer"
                },
                "table-id": {
                    "type": "string",
                    "example": "uuid"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "tableList.Response": {
            "type": "object",
            "properties": {
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/table.Table"
                    }
                }
            }
        },
        "tableListAvailable.Response": {
            "type": "object",
            "properties": {
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/table.Table"
                    }
                }
            }
        },
        "userEdit.Message": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "New user name"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8000",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Bigfood",
	Description: "Internal API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
